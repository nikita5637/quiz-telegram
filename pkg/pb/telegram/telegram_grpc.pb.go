// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: telegram.proto

package telegram

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageSenderServiceClient is the client API for MessageSenderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageSenderServiceClient interface {
	// SendMessage sends a message to client
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// SendSticker sends a sticker to client
	SendSticker(ctx context.Context, in *SendStickerRequest, opts ...grpc.CallOption) (*SendStickerResponse, error)
}

type messageSenderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageSenderServiceClient(cc grpc.ClientConnInterface) MessageSenderServiceClient {
	return &messageSenderServiceClient{cc}
}

func (c *messageSenderServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/telegram.MessageSenderService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSenderServiceClient) SendSticker(ctx context.Context, in *SendStickerRequest, opts ...grpc.CallOption) (*SendStickerResponse, error) {
	out := new(SendStickerResponse)
	err := c.cc.Invoke(ctx, "/telegram.MessageSenderService/SendSticker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageSenderServiceServer is the server API for MessageSenderService service.
// All implementations must embed UnimplementedMessageSenderServiceServer
// for forward compatibility
type MessageSenderServiceServer interface {
	// SendMessage sends a message to client
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// SendSticker sends a sticker to client
	SendSticker(context.Context, *SendStickerRequest) (*SendStickerResponse, error)
	mustEmbedUnimplementedMessageSenderServiceServer()
}

// UnimplementedMessageSenderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageSenderServiceServer struct {
}

func (UnimplementedMessageSenderServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessageSenderServiceServer) SendSticker(context.Context, *SendStickerRequest) (*SendStickerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSticker not implemented")
}
func (UnimplementedMessageSenderServiceServer) mustEmbedUnimplementedMessageSenderServiceServer() {}

// UnsafeMessageSenderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageSenderServiceServer will
// result in compilation errors.
type UnsafeMessageSenderServiceServer interface {
	mustEmbedUnimplementedMessageSenderServiceServer()
}

func RegisterMessageSenderServiceServer(s grpc.ServiceRegistrar, srv MessageSenderServiceServer) {
	s.RegisterService(&MessageSenderService_ServiceDesc, srv)
}

func _MessageSenderService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSenderServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telegram.MessageSenderService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSenderServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSenderService_SendSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendStickerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSenderServiceServer).SendSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telegram.MessageSenderService/SendSticker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSenderServiceServer).SendSticker(ctx, req.(*SendStickerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageSenderService_ServiceDesc is the grpc.ServiceDesc for MessageSenderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageSenderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telegram.MessageSenderService",
	HandlerType: (*MessageSenderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MessageSenderService_SendMessage_Handler,
		},
		{
			MethodName: "SendSticker",
			Handler:    _MessageSenderService_SendSticker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "telegram.proto",
}
