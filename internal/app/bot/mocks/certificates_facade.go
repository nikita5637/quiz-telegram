// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nikita5637/quiz-telegram/internal/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// CertificatesFacade is an autogenerated mock type for the CertificatesFacade type
type CertificatesFacade struct {
	mock.Mock
}

type CertificatesFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *CertificatesFacade) EXPECT() *CertificatesFacade_Expecter {
	return &CertificatesFacade_Expecter{mock: &_m.Mock}
}

// GetActiveCertificates provides a mock function with given fields: ctx
func (_m *CertificatesFacade) GetActiveCertificates(ctx context.Context) ([]model.Certificate, error) {
	ret := _m.Called(ctx)

	var r0 []model.Certificate
	if rf, ok := ret.Get(0).(func(context.Context) []model.Certificate); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Certificate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CertificatesFacade_GetActiveCertificates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveCertificates'
type CertificatesFacade_GetActiveCertificates_Call struct {
	*mock.Call
}

// GetActiveCertificates is a helper method to define mock.On call
//  - ctx context.Context
func (_e *CertificatesFacade_Expecter) GetActiveCertificates(ctx interface{}) *CertificatesFacade_GetActiveCertificates_Call {
	return &CertificatesFacade_GetActiveCertificates_Call{Call: _e.mock.On("GetActiveCertificates", ctx)}
}

func (_c *CertificatesFacade_GetActiveCertificates_Call) Run(run func(ctx context.Context)) *CertificatesFacade_GetActiveCertificates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CertificatesFacade_GetActiveCertificates_Call) Return(_a0 []model.Certificate, _a1 error) *CertificatesFacade_GetActiveCertificates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewCertificatesFacade interface {
	mock.TestingT
	Cleanup(func())
}

// NewCertificatesFacade creates a new instance of CertificatesFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCertificatesFacade(t mockConstructorTestingTNewCertificatesFacade) *CertificatesFacade {
	mock := &CertificatesFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
