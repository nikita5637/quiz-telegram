// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nikita5637/quiz-telegram/internal/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// RequestsFacade is an autogenerated mock type for the RequestsFacade type
type RequestsFacade struct {
	mock.Mock
}

type RequestsFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestsFacade) EXPECT() *RequestsFacade_Expecter {
	return &RequestsFacade_Expecter{mock: &_m.Mock}
}

// GetRequest provides a mock function with given fields: ctx, uuid
func (_m *RequestsFacade) GetRequest(ctx context.Context, uuid string) ([]byte, error) {
	ret := _m.Called(ctx, uuid)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestsFacade_GetRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRequest'
type RequestsFacade_GetRequest_Call struct {
	*mock.Call
}

// GetRequest is a helper method to define mock.On call
//  - ctx context.Context
//  - uuid string
func (_e *RequestsFacade_Expecter) GetRequest(ctx interface{}, uuid interface{}) *RequestsFacade_GetRequest_Call {
	return &RequestsFacade_GetRequest_Call{Call: _e.mock.On("GetRequest", ctx, uuid)}
}

func (_c *RequestsFacade_GetRequest_Call) Run(run func(ctx context.Context, uuid string)) *RequestsFacade_GetRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RequestsFacade_GetRequest_Call) Return(_a0 []byte, _a1 error) *RequestsFacade_GetRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterRequest provides a mock function with given fields: ctx, request
func (_m *RequestsFacade) RegisterRequest(ctx context.Context, request model.Request) (string, error) {
	ret := _m.Called(ctx, request)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, model.Request) string); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Request) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestsFacade_RegisterRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterRequest'
type RequestsFacade_RegisterRequest_Call struct {
	*mock.Call
}

// RegisterRequest is a helper method to define mock.On call
//  - ctx context.Context
//  - request model.Request
func (_e *RequestsFacade_Expecter) RegisterRequest(ctx interface{}, request interface{}) *RequestsFacade_RegisterRequest_Call {
	return &RequestsFacade_RegisterRequest_Call{Call: _e.mock.On("RegisterRequest", ctx, request)}
}

func (_c *RequestsFacade_RegisterRequest_Call) Run(run func(ctx context.Context, request model.Request)) *RequestsFacade_RegisterRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Request))
	})
	return _c
}

func (_c *RequestsFacade_RegisterRequest_Call) Return(_a0 string, _a1 error) *RequestsFacade_RegisterRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UnregisterRequest provides a mock function with given fields: ctx, uuid
func (_m *RequestsFacade) UnregisterRequest(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestsFacade_UnregisterRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterRequest'
type RequestsFacade_UnregisterRequest_Call struct {
	*mock.Call
}

// UnregisterRequest is a helper method to define mock.On call
//  - ctx context.Context
//  - uuid string
func (_e *RequestsFacade_Expecter) UnregisterRequest(ctx interface{}, uuid interface{}) *RequestsFacade_UnregisterRequest_Call {
	return &RequestsFacade_UnregisterRequest_Call{Call: _e.mock.On("UnregisterRequest", ctx, uuid)}
}

func (_c *RequestsFacade_UnregisterRequest_Call) Run(run func(ctx context.Context, uuid string)) *RequestsFacade_UnregisterRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RequestsFacade_UnregisterRequest_Call) Return(_a0 error) *RequestsFacade_UnregisterRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRequestsFacade interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequestsFacade creates a new instance of RequestsFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequestsFacade(t mockConstructorTestingTNewRequestsFacade) *RequestsFacade {
	mock := &RequestsFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
