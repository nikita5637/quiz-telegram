// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	registrator "github.com/nikita5637/quiz-registrator-api/pkg/pb/registrator"
)

// RegistratorServiceClient is an autogenerated mock type for the RegistratorServiceClient type
type RegistratorServiceClient struct {
	mock.Mock
}

type RegistratorServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RegistratorServiceClient) EXPECT() *RegistratorServiceClient_Expecter {
	return &RegistratorServiceClient_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, in, opts
func (_m *RegistratorServiceClient) CreateUser(ctx context.Context, in *registrator.CreateUserRequest, opts ...grpc.CallOption) (*registrator.CreateUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *registrator.CreateUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *registrator.CreateUserRequest, ...grpc.CallOption) *registrator.CreateUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registrator.CreateUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registrator.CreateUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistratorServiceClient_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type RegistratorServiceClient_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - in *registrator.CreateUserRequest
//  - opts ...grpc.CallOption
func (_e *RegistratorServiceClient_Expecter) CreateUser(ctx interface{}, in interface{}, opts ...interface{}) *RegistratorServiceClient_CreateUser_Call {
	return &RegistratorServiceClient_CreateUser_Call{Call: _e.mock.On("CreateUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RegistratorServiceClient_CreateUser_Call) Run(run func(ctx context.Context, in *registrator.CreateUserRequest, opts ...grpc.CallOption)) *RegistratorServiceClient_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*registrator.CreateUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *RegistratorServiceClient_CreateUser_Call) Return(_a0 *registrator.CreateUserResponse, _a1 error) *RegistratorServiceClient_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLeagueByID provides a mock function with given fields: ctx, in, opts
func (_m *RegistratorServiceClient) GetLeagueByID(ctx context.Context, in *registrator.GetLeagueByIDRequest, opts ...grpc.CallOption) (*registrator.GetLeagueByIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *registrator.GetLeagueByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, *registrator.GetLeagueByIDRequest, ...grpc.CallOption) *registrator.GetLeagueByIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registrator.GetLeagueByIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registrator.GetLeagueByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistratorServiceClient_GetLeagueByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeagueByID'
type RegistratorServiceClient_GetLeagueByID_Call struct {
	*mock.Call
}

// GetLeagueByID is a helper method to define mock.On call
//  - ctx context.Context
//  - in *registrator.GetLeagueByIDRequest
//  - opts ...grpc.CallOption
func (_e *RegistratorServiceClient_Expecter) GetLeagueByID(ctx interface{}, in interface{}, opts ...interface{}) *RegistratorServiceClient_GetLeagueByID_Call {
	return &RegistratorServiceClient_GetLeagueByID_Call{Call: _e.mock.On("GetLeagueByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RegistratorServiceClient_GetLeagueByID_Call) Run(run func(ctx context.Context, in *registrator.GetLeagueByIDRequest, opts ...grpc.CallOption)) *RegistratorServiceClient_GetLeagueByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*registrator.GetLeagueByIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *RegistratorServiceClient_GetLeagueByID_Call) Return(_a0 *registrator.GetLeagueByIDResponse, _a1 error) *RegistratorServiceClient_GetLeagueByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetPlaceByID provides a mock function with given fields: ctx, in, opts
func (_m *RegistratorServiceClient) GetPlaceByID(ctx context.Context, in *registrator.GetPlaceByIDRequest, opts ...grpc.CallOption) (*registrator.GetPlaceByIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *registrator.GetPlaceByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, *registrator.GetPlaceByIDRequest, ...grpc.CallOption) *registrator.GetPlaceByIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registrator.GetPlaceByIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registrator.GetPlaceByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistratorServiceClient_GetPlaceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlaceByID'
type RegistratorServiceClient_GetPlaceByID_Call struct {
	*mock.Call
}

// GetPlaceByID is a helper method to define mock.On call
//  - ctx context.Context
//  - in *registrator.GetPlaceByIDRequest
//  - opts ...grpc.CallOption
func (_e *RegistratorServiceClient_Expecter) GetPlaceByID(ctx interface{}, in interface{}, opts ...interface{}) *RegistratorServiceClient_GetPlaceByID_Call {
	return &RegistratorServiceClient_GetPlaceByID_Call{Call: _e.mock.On("GetPlaceByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RegistratorServiceClient_GetPlaceByID_Call) Run(run func(ctx context.Context, in *registrator.GetPlaceByIDRequest, opts ...grpc.CallOption)) *RegistratorServiceClient_GetPlaceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*registrator.GetPlaceByIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *RegistratorServiceClient_GetPlaceByID_Call) Return(_a0 *registrator.GetPlaceByIDResponse, _a1 error) *RegistratorServiceClient_GetPlaceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetPlayersByGameID provides a mock function with given fields: ctx, in, opts
func (_m *RegistratorServiceClient) GetPlayersByGameID(ctx context.Context, in *registrator.GetPlayersByGameIDRequest, opts ...grpc.CallOption) (*registrator.GetPlayersByGameIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *registrator.GetPlayersByGameIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, *registrator.GetPlayersByGameIDRequest, ...grpc.CallOption) *registrator.GetPlayersByGameIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registrator.GetPlayersByGameIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registrator.GetPlayersByGameIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistratorServiceClient_GetPlayersByGameID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayersByGameID'
type RegistratorServiceClient_GetPlayersByGameID_Call struct {
	*mock.Call
}

// GetPlayersByGameID is a helper method to define mock.On call
//  - ctx context.Context
//  - in *registrator.GetPlayersByGameIDRequest
//  - opts ...grpc.CallOption
func (_e *RegistratorServiceClient_Expecter) GetPlayersByGameID(ctx interface{}, in interface{}, opts ...interface{}) *RegistratorServiceClient_GetPlayersByGameID_Call {
	return &RegistratorServiceClient_GetPlayersByGameID_Call{Call: _e.mock.On("GetPlayersByGameID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RegistratorServiceClient_GetPlayersByGameID_Call) Run(run func(ctx context.Context, in *registrator.GetPlayersByGameIDRequest, opts ...grpc.CallOption)) *RegistratorServiceClient_GetPlayersByGameID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*registrator.GetPlayersByGameIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *RegistratorServiceClient_GetPlayersByGameID_Call) Return(_a0 *registrator.GetPlayersByGameIDResponse, _a1 error) *RegistratorServiceClient_GetPlayersByGameID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, in, opts
func (_m *RegistratorServiceClient) GetUserByID(ctx context.Context, in *registrator.GetUserByIDRequest, opts ...grpc.CallOption) (*registrator.GetUserByIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *registrator.GetUserByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, *registrator.GetUserByIDRequest, ...grpc.CallOption) *registrator.GetUserByIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registrator.GetUserByIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registrator.GetUserByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistratorServiceClient_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type RegistratorServiceClient_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//  - ctx context.Context
//  - in *registrator.GetUserByIDRequest
//  - opts ...grpc.CallOption
func (_e *RegistratorServiceClient_Expecter) GetUserByID(ctx interface{}, in interface{}, opts ...interface{}) *RegistratorServiceClient_GetUserByID_Call {
	return &RegistratorServiceClient_GetUserByID_Call{Call: _e.mock.On("GetUserByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RegistratorServiceClient_GetUserByID_Call) Run(run func(ctx context.Context, in *registrator.GetUserByIDRequest, opts ...grpc.CallOption)) *RegistratorServiceClient_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*registrator.GetUserByIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *RegistratorServiceClient_GetUserByID_Call) Return(_a0 *registrator.GetUserByIDResponse, _a1 error) *RegistratorServiceClient_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserByTelegramID provides a mock function with given fields: ctx, in, opts
func (_m *RegistratorServiceClient) GetUserByTelegramID(ctx context.Context, in *registrator.GetUserByTelegramIDRequest, opts ...grpc.CallOption) (*registrator.GetUserByTelegramIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *registrator.GetUserByTelegramIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, *registrator.GetUserByTelegramIDRequest, ...grpc.CallOption) *registrator.GetUserByTelegramIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registrator.GetUserByTelegramIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registrator.GetUserByTelegramIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistratorServiceClient_GetUserByTelegramID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByTelegramID'
type RegistratorServiceClient_GetUserByTelegramID_Call struct {
	*mock.Call
}

// GetUserByTelegramID is a helper method to define mock.On call
//  - ctx context.Context
//  - in *registrator.GetUserByTelegramIDRequest
//  - opts ...grpc.CallOption
func (_e *RegistratorServiceClient_Expecter) GetUserByTelegramID(ctx interface{}, in interface{}, opts ...interface{}) *RegistratorServiceClient_GetUserByTelegramID_Call {
	return &RegistratorServiceClient_GetUserByTelegramID_Call{Call: _e.mock.On("GetUserByTelegramID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RegistratorServiceClient_GetUserByTelegramID_Call) Run(run func(ctx context.Context, in *registrator.GetUserByTelegramIDRequest, opts ...grpc.CallOption)) *RegistratorServiceClient_GetUserByTelegramID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*registrator.GetUserByTelegramIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *RegistratorServiceClient_GetUserByTelegramID_Call) Return(_a0 *registrator.GetUserByTelegramIDResponse, _a1 error) *RegistratorServiceClient_GetUserByTelegramID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterGame provides a mock function with given fields: ctx, in, opts
func (_m *RegistratorServiceClient) RegisterGame(ctx context.Context, in *registrator.RegisterGameRequest, opts ...grpc.CallOption) (*registrator.RegisterGameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *registrator.RegisterGameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *registrator.RegisterGameRequest, ...grpc.CallOption) *registrator.RegisterGameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registrator.RegisterGameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registrator.RegisterGameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistratorServiceClient_RegisterGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterGame'
type RegistratorServiceClient_RegisterGame_Call struct {
	*mock.Call
}

// RegisterGame is a helper method to define mock.On call
//  - ctx context.Context
//  - in *registrator.RegisterGameRequest
//  - opts ...grpc.CallOption
func (_e *RegistratorServiceClient_Expecter) RegisterGame(ctx interface{}, in interface{}, opts ...interface{}) *RegistratorServiceClient_RegisterGame_Call {
	return &RegistratorServiceClient_RegisterGame_Call{Call: _e.mock.On("RegisterGame",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RegistratorServiceClient_RegisterGame_Call) Run(run func(ctx context.Context, in *registrator.RegisterGameRequest, opts ...grpc.CallOption)) *RegistratorServiceClient_RegisterGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*registrator.RegisterGameRequest), variadicArgs...)
	})
	return _c
}

func (_c *RegistratorServiceClient_RegisterGame_Call) Return(_a0 *registrator.RegisterGameResponse, _a1 error) *RegistratorServiceClient_RegisterGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterPlayer provides a mock function with given fields: ctx, in, opts
func (_m *RegistratorServiceClient) RegisterPlayer(ctx context.Context, in *registrator.RegisterPlayerRequest, opts ...grpc.CallOption) (*registrator.RegisterPlayerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *registrator.RegisterPlayerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *registrator.RegisterPlayerRequest, ...grpc.CallOption) *registrator.RegisterPlayerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registrator.RegisterPlayerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registrator.RegisterPlayerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistratorServiceClient_RegisterPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterPlayer'
type RegistratorServiceClient_RegisterPlayer_Call struct {
	*mock.Call
}

// RegisterPlayer is a helper method to define mock.On call
//  - ctx context.Context
//  - in *registrator.RegisterPlayerRequest
//  - opts ...grpc.CallOption
func (_e *RegistratorServiceClient_Expecter) RegisterPlayer(ctx interface{}, in interface{}, opts ...interface{}) *RegistratorServiceClient_RegisterPlayer_Call {
	return &RegistratorServiceClient_RegisterPlayer_Call{Call: _e.mock.On("RegisterPlayer",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RegistratorServiceClient_RegisterPlayer_Call) Run(run func(ctx context.Context, in *registrator.RegisterPlayerRequest, opts ...grpc.CallOption)) *RegistratorServiceClient_RegisterPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*registrator.RegisterPlayerRequest), variadicArgs...)
	})
	return _c
}

func (_c *RegistratorServiceClient_RegisterPlayer_Call) Return(_a0 *registrator.RegisterPlayerResponse, _a1 error) *RegistratorServiceClient_RegisterPlayer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UnregisterGame provides a mock function with given fields: ctx, in, opts
func (_m *RegistratorServiceClient) UnregisterGame(ctx context.Context, in *registrator.UnregisterGameRequest, opts ...grpc.CallOption) (*registrator.UnregisterGameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *registrator.UnregisterGameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *registrator.UnregisterGameRequest, ...grpc.CallOption) *registrator.UnregisterGameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registrator.UnregisterGameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registrator.UnregisterGameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistratorServiceClient_UnregisterGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterGame'
type RegistratorServiceClient_UnregisterGame_Call struct {
	*mock.Call
}

// UnregisterGame is a helper method to define mock.On call
//  - ctx context.Context
//  - in *registrator.UnregisterGameRequest
//  - opts ...grpc.CallOption
func (_e *RegistratorServiceClient_Expecter) UnregisterGame(ctx interface{}, in interface{}, opts ...interface{}) *RegistratorServiceClient_UnregisterGame_Call {
	return &RegistratorServiceClient_UnregisterGame_Call{Call: _e.mock.On("UnregisterGame",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RegistratorServiceClient_UnregisterGame_Call) Run(run func(ctx context.Context, in *registrator.UnregisterGameRequest, opts ...grpc.CallOption)) *RegistratorServiceClient_UnregisterGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*registrator.UnregisterGameRequest), variadicArgs...)
	})
	return _c
}

func (_c *RegistratorServiceClient_UnregisterGame_Call) Return(_a0 *registrator.UnregisterGameResponse, _a1 error) *RegistratorServiceClient_UnregisterGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UnregisterPlayer provides a mock function with given fields: ctx, in, opts
func (_m *RegistratorServiceClient) UnregisterPlayer(ctx context.Context, in *registrator.UnregisterPlayerRequest, opts ...grpc.CallOption) (*registrator.UnregisterPlayerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *registrator.UnregisterPlayerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *registrator.UnregisterPlayerRequest, ...grpc.CallOption) *registrator.UnregisterPlayerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registrator.UnregisterPlayerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registrator.UnregisterPlayerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistratorServiceClient_UnregisterPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterPlayer'
type RegistratorServiceClient_UnregisterPlayer_Call struct {
	*mock.Call
}

// UnregisterPlayer is a helper method to define mock.On call
//  - ctx context.Context
//  - in *registrator.UnregisterPlayerRequest
//  - opts ...grpc.CallOption
func (_e *RegistratorServiceClient_Expecter) UnregisterPlayer(ctx interface{}, in interface{}, opts ...interface{}) *RegistratorServiceClient_UnregisterPlayer_Call {
	return &RegistratorServiceClient_UnregisterPlayer_Call{Call: _e.mock.On("UnregisterPlayer",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RegistratorServiceClient_UnregisterPlayer_Call) Run(run func(ctx context.Context, in *registrator.UnregisterPlayerRequest, opts ...grpc.CallOption)) *RegistratorServiceClient_UnregisterPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*registrator.UnregisterPlayerRequest), variadicArgs...)
	})
	return _c
}

func (_c *RegistratorServiceClient_UnregisterPlayer_Call) Return(_a0 *registrator.UnregisterPlayerResponse, _a1 error) *RegistratorServiceClient_UnregisterPlayer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdatePayment provides a mock function with given fields: ctx, in, opts
func (_m *RegistratorServiceClient) UpdatePayment(ctx context.Context, in *registrator.UpdatePaymentRequest, opts ...grpc.CallOption) (*registrator.UpdatePaymentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *registrator.UpdatePaymentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *registrator.UpdatePaymentRequest, ...grpc.CallOption) *registrator.UpdatePaymentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registrator.UpdatePaymentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registrator.UpdatePaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistratorServiceClient_UpdatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePayment'
type RegistratorServiceClient_UpdatePayment_Call struct {
	*mock.Call
}

// UpdatePayment is a helper method to define mock.On call
//  - ctx context.Context
//  - in *registrator.UpdatePaymentRequest
//  - opts ...grpc.CallOption
func (_e *RegistratorServiceClient_Expecter) UpdatePayment(ctx interface{}, in interface{}, opts ...interface{}) *RegistratorServiceClient_UpdatePayment_Call {
	return &RegistratorServiceClient_UpdatePayment_Call{Call: _e.mock.On("UpdatePayment",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RegistratorServiceClient_UpdatePayment_Call) Run(run func(ctx context.Context, in *registrator.UpdatePaymentRequest, opts ...grpc.CallOption)) *RegistratorServiceClient_UpdatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*registrator.UpdatePaymentRequest), variadicArgs...)
	})
	return _c
}

func (_c *RegistratorServiceClient_UpdatePayment_Call) Return(_a0 *registrator.UpdatePaymentResponse, _a1 error) *RegistratorServiceClient_UpdatePayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateUserEmail provides a mock function with given fields: ctx, in, opts
func (_m *RegistratorServiceClient) UpdateUserEmail(ctx context.Context, in *registrator.UpdateUserEmailRequest, opts ...grpc.CallOption) (*registrator.UpdateUserEmailResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *registrator.UpdateUserEmailResponse
	if rf, ok := ret.Get(0).(func(context.Context, *registrator.UpdateUserEmailRequest, ...grpc.CallOption) *registrator.UpdateUserEmailResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registrator.UpdateUserEmailResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registrator.UpdateUserEmailRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistratorServiceClient_UpdateUserEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserEmail'
type RegistratorServiceClient_UpdateUserEmail_Call struct {
	*mock.Call
}

// UpdateUserEmail is a helper method to define mock.On call
//  - ctx context.Context
//  - in *registrator.UpdateUserEmailRequest
//  - opts ...grpc.CallOption
func (_e *RegistratorServiceClient_Expecter) UpdateUserEmail(ctx interface{}, in interface{}, opts ...interface{}) *RegistratorServiceClient_UpdateUserEmail_Call {
	return &RegistratorServiceClient_UpdateUserEmail_Call{Call: _e.mock.On("UpdateUserEmail",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RegistratorServiceClient_UpdateUserEmail_Call) Run(run func(ctx context.Context, in *registrator.UpdateUserEmailRequest, opts ...grpc.CallOption)) *RegistratorServiceClient_UpdateUserEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*registrator.UpdateUserEmailRequest), variadicArgs...)
	})
	return _c
}

func (_c *RegistratorServiceClient_UpdateUserEmail_Call) Return(_a0 *registrator.UpdateUserEmailResponse, _a1 error) *RegistratorServiceClient_UpdateUserEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateUserName provides a mock function with given fields: ctx, in, opts
func (_m *RegistratorServiceClient) UpdateUserName(ctx context.Context, in *registrator.UpdateUserNameRequest, opts ...grpc.CallOption) (*registrator.UpdateUserNameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *registrator.UpdateUserNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *registrator.UpdateUserNameRequest, ...grpc.CallOption) *registrator.UpdateUserNameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registrator.UpdateUserNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registrator.UpdateUserNameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistratorServiceClient_UpdateUserName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserName'
type RegistratorServiceClient_UpdateUserName_Call struct {
	*mock.Call
}

// UpdateUserName is a helper method to define mock.On call
//  - ctx context.Context
//  - in *registrator.UpdateUserNameRequest
//  - opts ...grpc.CallOption
func (_e *RegistratorServiceClient_Expecter) UpdateUserName(ctx interface{}, in interface{}, opts ...interface{}) *RegistratorServiceClient_UpdateUserName_Call {
	return &RegistratorServiceClient_UpdateUserName_Call{Call: _e.mock.On("UpdateUserName",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RegistratorServiceClient_UpdateUserName_Call) Run(run func(ctx context.Context, in *registrator.UpdateUserNameRequest, opts ...grpc.CallOption)) *RegistratorServiceClient_UpdateUserName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*registrator.UpdateUserNameRequest), variadicArgs...)
	})
	return _c
}

func (_c *RegistratorServiceClient_UpdateUserName_Call) Return(_a0 *registrator.UpdateUserNameResponse, _a1 error) *RegistratorServiceClient_UpdateUserName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateUserPhone provides a mock function with given fields: ctx, in, opts
func (_m *RegistratorServiceClient) UpdateUserPhone(ctx context.Context, in *registrator.UpdateUserPhoneRequest, opts ...grpc.CallOption) (*registrator.UpdateUserPhoneResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *registrator.UpdateUserPhoneResponse
	if rf, ok := ret.Get(0).(func(context.Context, *registrator.UpdateUserPhoneRequest, ...grpc.CallOption) *registrator.UpdateUserPhoneResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registrator.UpdateUserPhoneResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registrator.UpdateUserPhoneRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistratorServiceClient_UpdateUserPhone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPhone'
type RegistratorServiceClient_UpdateUserPhone_Call struct {
	*mock.Call
}

// UpdateUserPhone is a helper method to define mock.On call
//  - ctx context.Context
//  - in *registrator.UpdateUserPhoneRequest
//  - opts ...grpc.CallOption
func (_e *RegistratorServiceClient_Expecter) UpdateUserPhone(ctx interface{}, in interface{}, opts ...interface{}) *RegistratorServiceClient_UpdateUserPhone_Call {
	return &RegistratorServiceClient_UpdateUserPhone_Call{Call: _e.mock.On("UpdateUserPhone",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RegistratorServiceClient_UpdateUserPhone_Call) Run(run func(ctx context.Context, in *registrator.UpdateUserPhoneRequest, opts ...grpc.CallOption)) *RegistratorServiceClient_UpdateUserPhone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*registrator.UpdateUserPhoneRequest), variadicArgs...)
	})
	return _c
}

func (_c *RegistratorServiceClient_UpdateUserPhone_Call) Return(_a0 *registrator.UpdateUserPhoneResponse, _a1 error) *RegistratorServiceClient_UpdateUserPhone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateUserState provides a mock function with given fields: ctx, in, opts
func (_m *RegistratorServiceClient) UpdateUserState(ctx context.Context, in *registrator.UpdateUserStateRequest, opts ...grpc.CallOption) (*registrator.UpdateUserStateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *registrator.UpdateUserStateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *registrator.UpdateUserStateRequest, ...grpc.CallOption) *registrator.UpdateUserStateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registrator.UpdateUserStateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registrator.UpdateUserStateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistratorServiceClient_UpdateUserState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserState'
type RegistratorServiceClient_UpdateUserState_Call struct {
	*mock.Call
}

// UpdateUserState is a helper method to define mock.On call
//  - ctx context.Context
//  - in *registrator.UpdateUserStateRequest
//  - opts ...grpc.CallOption
func (_e *RegistratorServiceClient_Expecter) UpdateUserState(ctx interface{}, in interface{}, opts ...interface{}) *RegistratorServiceClient_UpdateUserState_Call {
	return &RegistratorServiceClient_UpdateUserState_Call{Call: _e.mock.On("UpdateUserState",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RegistratorServiceClient_UpdateUserState_Call) Run(run func(ctx context.Context, in *registrator.UpdateUserStateRequest, opts ...grpc.CallOption)) *RegistratorServiceClient_UpdateUserState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*registrator.UpdateUserStateRequest), variadicArgs...)
	})
	return _c
}

func (_c *RegistratorServiceClient_UpdateUserState_Call) Return(_a0 *registrator.UpdateUserStateResponse, _a1 error) *RegistratorServiceClient_UpdateUserState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewRegistratorServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegistratorServiceClient creates a new instance of RegistratorServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegistratorServiceClient(t mockConstructorTestingTNewRegistratorServiceClient) *RegistratorServiceClient {
	mock := &RegistratorServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
