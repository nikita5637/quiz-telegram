// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nikita5637/quiz-telegram/internal/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// GamesFacade is an autogenerated mock type for the GamesFacade type
type GamesFacade struct {
	mock.Mock
}

type GamesFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *GamesFacade) EXPECT() *GamesFacade_Expecter {
	return &GamesFacade_Expecter{mock: &_m.Mock}
}

// GetGameByID provides a mock function with given fields: ctx, id
func (_m *GamesFacade) GetGameByID(ctx context.Context, id int32) (model.Game, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Game
	if rf, ok := ret.Get(0).(func(context.Context, int32) model.Game); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Game)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesFacade_GetGameByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameByID'
type GamesFacade_GetGameByID_Call struct {
	*mock.Call
}

// GetGameByID is a helper method to define mock.On call
//  - ctx context.Context
//  - id int32
func (_e *GamesFacade_Expecter) GetGameByID(ctx interface{}, id interface{}) *GamesFacade_GetGameByID_Call {
	return &GamesFacade_GetGameByID_Call{Call: _e.mock.On("GetGameByID", ctx, id)}
}

func (_c *GamesFacade_GetGameByID_Call) Run(run func(ctx context.Context, id int32)) *GamesFacade_GetGameByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *GamesFacade_GetGameByID_Call) Return(_a0 model.Game, _a1 error) *GamesFacade_GetGameByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetGames provides a mock function with given fields: ctx, active
func (_m *GamesFacade) GetGames(ctx context.Context, active bool) ([]model.Game, error) {
	ret := _m.Called(ctx, active)

	var r0 []model.Game
	if rf, ok := ret.Get(0).(func(context.Context, bool) []model.Game); ok {
		r0 = rf(ctx, active)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, active)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesFacade_GetGames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGames'
type GamesFacade_GetGames_Call struct {
	*mock.Call
}

// GetGames is a helper method to define mock.On call
//  - ctx context.Context
//  - active bool
func (_e *GamesFacade_Expecter) GetGames(ctx interface{}, active interface{}) *GamesFacade_GetGames_Call {
	return &GamesFacade_GetGames_Call{Call: _e.mock.On("GetGames", ctx, active)}
}

func (_c *GamesFacade_GetGames_Call) Run(run func(ctx context.Context, active bool)) *GamesFacade_GetGames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *GamesFacade_GetGames_Call) Return(_a0 []model.Game, _a1 error) *GamesFacade_GetGames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRegisteredGames provides a mock function with given fields: ctx, active
func (_m *GamesFacade) GetRegisteredGames(ctx context.Context, active bool) ([]model.Game, error) {
	ret := _m.Called(ctx, active)

	var r0 []model.Game
	if rf, ok := ret.Get(0).(func(context.Context, bool) []model.Game); ok {
		r0 = rf(ctx, active)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, active)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesFacade_GetRegisteredGames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegisteredGames'
type GamesFacade_GetRegisteredGames_Call struct {
	*mock.Call
}

// GetRegisteredGames is a helper method to define mock.On call
//  - ctx context.Context
//  - active bool
func (_e *GamesFacade_Expecter) GetRegisteredGames(ctx interface{}, active interface{}) *GamesFacade_GetRegisteredGames_Call {
	return &GamesFacade_GetRegisteredGames_Call{Call: _e.mock.On("GetRegisteredGames", ctx, active)}
}

func (_c *GamesFacade_GetRegisteredGames_Call) Run(run func(ctx context.Context, active bool)) *GamesFacade_GetRegisteredGames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *GamesFacade_GetRegisteredGames_Call) Return(_a0 []model.Game, _a1 error) *GamesFacade_GetRegisteredGames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserGames provides a mock function with given fields: ctx, active, userID
func (_m *GamesFacade) GetUserGames(ctx context.Context, active bool, userID int32) ([]model.Game, error) {
	ret := _m.Called(ctx, active, userID)

	var r0 []model.Game
	if rf, ok := ret.Get(0).(func(context.Context, bool, int32) []model.Game); ok {
		r0 = rf(ctx, active, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool, int32) error); ok {
		r1 = rf(ctx, active, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesFacade_GetUserGames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserGames'
type GamesFacade_GetUserGames_Call struct {
	*mock.Call
}

// GetUserGames is a helper method to define mock.On call
//  - ctx context.Context
//  - active bool
//  - userID int32
func (_e *GamesFacade_Expecter) GetUserGames(ctx interface{}, active interface{}, userID interface{}) *GamesFacade_GetUserGames_Call {
	return &GamesFacade_GetUserGames_Call{Call: _e.mock.On("GetUserGames", ctx, active, userID)}
}

func (_c *GamesFacade_GetUserGames_Call) Run(run func(ctx context.Context, active bool, userID int32)) *GamesFacade_GetUserGames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool), args[2].(int32))
	})
	return _c
}

func (_c *GamesFacade_GetUserGames_Call) Return(_a0 []model.Game, _a1 error) *GamesFacade_GetUserGames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewGamesFacade interface {
	mock.TestingT
	Cleanup(func())
}

// NewGamesFacade creates a new instance of GamesFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGamesFacade(t mockConstructorTestingTNewGamesFacade) *GamesFacade {
	mock := &GamesFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
