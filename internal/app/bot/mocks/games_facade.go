// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nikita5637/quiz-telegram/internal/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// GamesFacade is an autogenerated mock type for the GamesFacade type
type GamesFacade struct {
	mock.Mock
}

type GamesFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *GamesFacade) EXPECT() *GamesFacade_Expecter {
	return &GamesFacade_Expecter{mock: &_m.Mock}
}

// GetGame provides a mock function with given fields: ctx, id
func (_m *GamesFacade) GetGame(ctx context.Context, id int32) (model.Game, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Game
	if rf, ok := ret.Get(0).(func(context.Context, int32) model.Game); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Game)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesFacade_GetGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGame'
type GamesFacade_GetGame_Call struct {
	*mock.Call
}

// GetGame is a helper method to define mock.On call
//  - ctx context.Context
//  - id int32
func (_e *GamesFacade_Expecter) GetGame(ctx interface{}, id interface{}) *GamesFacade_GetGame_Call {
	return &GamesFacade_GetGame_Call{Call: _e.mock.On("GetGame", ctx, id)}
}

func (_c *GamesFacade_GetGame_Call) Run(run func(ctx context.Context, id int32)) *GamesFacade_GetGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *GamesFacade_GetGame_Call) Return(_a0 model.Game, _a1 error) *GamesFacade_GetGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetGames provides a mock function with given fields: ctx, registered, isInMaster, hasPassed
func (_m *GamesFacade) GetGames(ctx context.Context, registered bool, isInMaster bool, hasPassed bool) ([]model.Game, error) {
	ret := _m.Called(ctx, registered, isInMaster, hasPassed)

	var r0 []model.Game
	if rf, ok := ret.Get(0).(func(context.Context, bool, bool, bool) []model.Game); ok {
		r0 = rf(ctx, registered, isInMaster, hasPassed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool, bool, bool) error); ok {
		r1 = rf(ctx, registered, isInMaster, hasPassed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesFacade_GetGames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGames'
type GamesFacade_GetGames_Call struct {
	*mock.Call
}

// GetGames is a helper method to define mock.On call
//  - ctx context.Context
//  - registered bool
//  - isInMaster bool
//  - hasPassed bool
func (_e *GamesFacade_Expecter) GetGames(ctx interface{}, registered interface{}, isInMaster interface{}, hasPassed interface{}) *GamesFacade_GetGames_Call {
	return &GamesFacade_GetGames_Call{Call: _e.mock.On("GetGames", ctx, registered, isInMaster, hasPassed)}
}

func (_c *GamesFacade_GetGames_Call) Run(run func(ctx context.Context, registered bool, isInMaster bool, hasPassed bool)) *GamesFacade_GetGames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool), args[2].(bool), args[3].(bool))
	})
	return _c
}

func (_c *GamesFacade_GetGames_Call) Return(_a0 []model.Game, _a1 error) *GamesFacade_GetGames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetGamesByUserID provides a mock function with given fields: ctx, userID
func (_m *GamesFacade) GetGamesByUserID(ctx context.Context, userID int32) ([]model.Game, error) {
	ret := _m.Called(ctx, userID)

	var r0 []model.Game
	if rf, ok := ret.Get(0).(func(context.Context, int32) []model.Game); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesFacade_GetGamesByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGamesByUserID'
type GamesFacade_GetGamesByUserID_Call struct {
	*mock.Call
}

// GetGamesByUserID is a helper method to define mock.On call
//  - ctx context.Context
//  - userID int32
func (_e *GamesFacade_Expecter) GetGamesByUserID(ctx interface{}, userID interface{}) *GamesFacade_GetGamesByUserID_Call {
	return &GamesFacade_GetGamesByUserID_Call{Call: _e.mock.On("GetGamesByUserID", ctx, userID)}
}

func (_c *GamesFacade_GetGamesByUserID_Call) Run(run func(ctx context.Context, userID int32)) *GamesFacade_GetGamesByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *GamesFacade_GetGamesByUserID_Call) Return(_a0 []model.Game, _a1 error) *GamesFacade_GetGamesByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterGame provides a mock function with given fields: ctx, gameID
func (_m *GamesFacade) RegisterGame(ctx context.Context, gameID int32) error {
	ret := _m.Called(ctx, gameID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, gameID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GamesFacade_RegisterGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterGame'
type GamesFacade_RegisterGame_Call struct {
	*mock.Call
}

// RegisterGame is a helper method to define mock.On call
//  - ctx context.Context
//  - gameID int32
func (_e *GamesFacade_Expecter) RegisterGame(ctx interface{}, gameID interface{}) *GamesFacade_RegisterGame_Call {
	return &GamesFacade_RegisterGame_Call{Call: _e.mock.On("RegisterGame", ctx, gameID)}
}

func (_c *GamesFacade_RegisterGame_Call) Run(run func(ctx context.Context, gameID int32)) *GamesFacade_RegisterGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *GamesFacade_RegisterGame_Call) Return(_a0 error) *GamesFacade_RegisterGame_Call {
	_c.Call.Return(_a0)
	return _c
}

// SearchPassedAndRegisteredGames provides a mock function with given fields: ctx, page, pageSize
func (_m *GamesFacade) SearchPassedAndRegisteredGames(ctx context.Context, page uint64, pageSize uint64) ([]model.Game, uint64, error) {
	ret := _m.Called(ctx, page, pageSize)

	var r0 []model.Game
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []model.Game); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Game)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) uint64); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, uint64, uint64) error); ok {
		r2 = rf(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GamesFacade_SearchPassedAndRegisteredGames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchPassedAndRegisteredGames'
type GamesFacade_SearchPassedAndRegisteredGames_Call struct {
	*mock.Call
}

// SearchPassedAndRegisteredGames is a helper method to define mock.On call
//  - ctx context.Context
//  - page uint64
//  - pageSize uint64
func (_e *GamesFacade_Expecter) SearchPassedAndRegisteredGames(ctx interface{}, page interface{}, pageSize interface{}) *GamesFacade_SearchPassedAndRegisteredGames_Call {
	return &GamesFacade_SearchPassedAndRegisteredGames_Call{Call: _e.mock.On("SearchPassedAndRegisteredGames", ctx, page, pageSize)}
}

func (_c *GamesFacade_SearchPassedAndRegisteredGames_Call) Run(run func(ctx context.Context, page uint64, pageSize uint64)) *GamesFacade_SearchPassedAndRegisteredGames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *GamesFacade_SearchPassedAndRegisteredGames_Call) Return(_a0 []model.Game, _a1 uint64, _a2 error) *GamesFacade_SearchPassedAndRegisteredGames_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

// UnregisterGame provides a mock function with given fields: ctx, gameID
func (_m *GamesFacade) UnregisterGame(ctx context.Context, gameID int32) error {
	ret := _m.Called(ctx, gameID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, gameID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GamesFacade_UnregisterGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterGame'
type GamesFacade_UnregisterGame_Call struct {
	*mock.Call
}

// UnregisterGame is a helper method to define mock.On call
//  - ctx context.Context
//  - gameID int32
func (_e *GamesFacade_Expecter) UnregisterGame(ctx interface{}, gameID interface{}) *GamesFacade_UnregisterGame_Call {
	return &GamesFacade_UnregisterGame_Call{Call: _e.mock.On("UnregisterGame", ctx, gameID)}
}

func (_c *GamesFacade_UnregisterGame_Call) Run(run func(ctx context.Context, gameID int32)) *GamesFacade_UnregisterGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *GamesFacade_UnregisterGame_Call) Return(_a0 error) *GamesFacade_UnregisterGame_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdatePayment provides a mock function with given fields: ctx, gameID, payment
func (_m *GamesFacade) UpdatePayment(ctx context.Context, gameID int32, payment int32) error {
	ret := _m.Called(ctx, gameID, payment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) error); ok {
		r0 = rf(ctx, gameID, payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GamesFacade_UpdatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePayment'
type GamesFacade_UpdatePayment_Call struct {
	*mock.Call
}

// UpdatePayment is a helper method to define mock.On call
//  - ctx context.Context
//  - gameID int32
//  - payment int32
func (_e *GamesFacade_Expecter) UpdatePayment(ctx interface{}, gameID interface{}, payment interface{}) *GamesFacade_UpdatePayment_Call {
	return &GamesFacade_UpdatePayment_Call{Call: _e.mock.On("UpdatePayment", ctx, gameID, payment)}
}

func (_c *GamesFacade_UpdatePayment_Call) Run(run func(ctx context.Context, gameID int32, payment int32)) *GamesFacade_UpdatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(int32))
	})
	return _c
}

func (_c *GamesFacade_UpdatePayment_Call) Return(_a0 error) *GamesFacade_UpdatePayment_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewGamesFacade interface {
	mock.TestingT
	Cleanup(func())
}

// NewGamesFacade creates a new instance of GamesFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGamesFacade(t mockConstructorTestingTNewGamesFacade) *GamesFacade {
	mock := &GamesFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
