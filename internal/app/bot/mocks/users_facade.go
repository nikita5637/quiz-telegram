// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nikita5637/quiz-telegram/internal/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// UsersFacade is an autogenerated mock type for the UsersFacade type
type UsersFacade struct {
	mock.Mock
}

type UsersFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *UsersFacade) EXPECT() *UsersFacade_Expecter {
	return &UsersFacade_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, name, telegramID, state
func (_m *UsersFacade) CreateUser(ctx context.Context, name string, telegramID int64, state int32) (int32, error) {
	ret := _m.Called(ctx, name, telegramID, state)

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int32) int32); ok {
		r0 = rf(ctx, name, telegramID, state)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int32) error); ok {
		r1 = rf(ctx, name, telegramID, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersFacade_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UsersFacade_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - name string
//  - telegramID int64
//  - state int32
func (_e *UsersFacade_Expecter) CreateUser(ctx interface{}, name interface{}, telegramID interface{}, state interface{}) *UsersFacade_CreateUser_Call {
	return &UsersFacade_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, name, telegramID, state)}
}

func (_c *UsersFacade_CreateUser_Call) Run(run func(ctx context.Context, name string, telegramID int64, state int32)) *UsersFacade_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int32))
	})
	return _c
}

func (_c *UsersFacade_CreateUser_Call) Return(_a0 int32, _a1 error) *UsersFacade_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *UsersFacade) GetUserByID(ctx context.Context, userID int32) (model.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(context.Context, int32) model.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersFacade_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UsersFacade_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//  - ctx context.Context
//  - userID int32
func (_e *UsersFacade_Expecter) GetUserByID(ctx interface{}, userID interface{}) *UsersFacade_GetUserByID_Call {
	return &UsersFacade_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, userID)}
}

func (_c *UsersFacade_GetUserByID_Call) Run(run func(ctx context.Context, userID int32)) *UsersFacade_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *UsersFacade_GetUserByID_Call) Return(_a0 model.User, _a1 error) *UsersFacade_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserByTelegramID provides a mock function with given fields: ctx, telegramID
func (_m *UsersFacade) GetUserByTelegramID(ctx context.Context, telegramID int64) (model.User, error) {
	ret := _m.Called(ctx, telegramID)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.User); ok {
		r0 = rf(ctx, telegramID)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, telegramID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersFacade_GetUserByTelegramID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByTelegramID'
type UsersFacade_GetUserByTelegramID_Call struct {
	*mock.Call
}

// GetUserByTelegramID is a helper method to define mock.On call
//  - ctx context.Context
//  - telegramID int64
func (_e *UsersFacade_Expecter) GetUserByTelegramID(ctx interface{}, telegramID interface{}) *UsersFacade_GetUserByTelegramID_Call {
	return &UsersFacade_GetUserByTelegramID_Call{Call: _e.mock.On("GetUserByTelegramID", ctx, telegramID)}
}

func (_c *UsersFacade_GetUserByTelegramID_Call) Run(run func(ctx context.Context, telegramID int64)) *UsersFacade_GetUserByTelegramID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UsersFacade_GetUserByTelegramID_Call) Return(_a0 model.User, _a1 error) *UsersFacade_GetUserByTelegramID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateUserEmail provides a mock function with given fields: ctx, userID, email
func (_m *UsersFacade) UpdateUserEmail(ctx context.Context, userID int32, email string) error {
	ret := _m.Called(ctx, userID, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) error); ok {
		r0 = rf(ctx, userID, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersFacade_UpdateUserEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserEmail'
type UsersFacade_UpdateUserEmail_Call struct {
	*mock.Call
}

// UpdateUserEmail is a helper method to define mock.On call
//  - ctx context.Context
//  - userID int32
//  - email string
func (_e *UsersFacade_Expecter) UpdateUserEmail(ctx interface{}, userID interface{}, email interface{}) *UsersFacade_UpdateUserEmail_Call {
	return &UsersFacade_UpdateUserEmail_Call{Call: _e.mock.On("UpdateUserEmail", ctx, userID, email)}
}

func (_c *UsersFacade_UpdateUserEmail_Call) Run(run func(ctx context.Context, userID int32, email string)) *UsersFacade_UpdateUserEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(string))
	})
	return _c
}

func (_c *UsersFacade_UpdateUserEmail_Call) Return(_a0 error) *UsersFacade_UpdateUserEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateUserName provides a mock function with given fields: ctx, userID, name
func (_m *UsersFacade) UpdateUserName(ctx context.Context, userID int32, name string) error {
	ret := _m.Called(ctx, userID, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) error); ok {
		r0 = rf(ctx, userID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersFacade_UpdateUserName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserName'
type UsersFacade_UpdateUserName_Call struct {
	*mock.Call
}

// UpdateUserName is a helper method to define mock.On call
//  - ctx context.Context
//  - userID int32
//  - name string
func (_e *UsersFacade_Expecter) UpdateUserName(ctx interface{}, userID interface{}, name interface{}) *UsersFacade_UpdateUserName_Call {
	return &UsersFacade_UpdateUserName_Call{Call: _e.mock.On("UpdateUserName", ctx, userID, name)}
}

func (_c *UsersFacade_UpdateUserName_Call) Run(run func(ctx context.Context, userID int32, name string)) *UsersFacade_UpdateUserName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(string))
	})
	return _c
}

func (_c *UsersFacade_UpdateUserName_Call) Return(_a0 error) *UsersFacade_UpdateUserName_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateUserPhone provides a mock function with given fields: ctx, userID, phone
func (_m *UsersFacade) UpdateUserPhone(ctx context.Context, userID int32, phone string) error {
	ret := _m.Called(ctx, userID, phone)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) error); ok {
		r0 = rf(ctx, userID, phone)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersFacade_UpdateUserPhone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPhone'
type UsersFacade_UpdateUserPhone_Call struct {
	*mock.Call
}

// UpdateUserPhone is a helper method to define mock.On call
//  - ctx context.Context
//  - userID int32
//  - phone string
func (_e *UsersFacade_Expecter) UpdateUserPhone(ctx interface{}, userID interface{}, phone interface{}) *UsersFacade_UpdateUserPhone_Call {
	return &UsersFacade_UpdateUserPhone_Call{Call: _e.mock.On("UpdateUserPhone", ctx, userID, phone)}
}

func (_c *UsersFacade_UpdateUserPhone_Call) Run(run func(ctx context.Context, userID int32, phone string)) *UsersFacade_UpdateUserPhone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(string))
	})
	return _c
}

func (_c *UsersFacade_UpdateUserPhone_Call) Return(_a0 error) *UsersFacade_UpdateUserPhone_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateUserState provides a mock function with given fields: ctx, userID, state
func (_m *UsersFacade) UpdateUserState(ctx context.Context, userID int32, state int32) error {
	ret := _m.Called(ctx, userID, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) error); ok {
		r0 = rf(ctx, userID, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersFacade_UpdateUserState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserState'
type UsersFacade_UpdateUserState_Call struct {
	*mock.Call
}

// UpdateUserState is a helper method to define mock.On call
//  - ctx context.Context
//  - userID int32
//  - state int32
func (_e *UsersFacade_Expecter) UpdateUserState(ctx interface{}, userID interface{}, state interface{}) *UsersFacade_UpdateUserState_Call {
	return &UsersFacade_UpdateUserState_Call{Call: _e.mock.On("UpdateUserState", ctx, userID, state)}
}

func (_c *UsersFacade_UpdateUserState_Call) Run(run func(ctx context.Context, userID int32, state int32)) *UsersFacade_UpdateUserState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(int32))
	})
	return _c
}

func (_c *UsersFacade_UpdateUserState_Call) Return(_a0 error) *UsersFacade_UpdateUserState_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewUsersFacade interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersFacade creates a new instance of UsersFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersFacade(t mockConstructorTestingTNewUsersFacade) *UsersFacade {
	mock := &UsersFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
