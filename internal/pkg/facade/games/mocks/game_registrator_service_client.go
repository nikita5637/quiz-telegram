// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	game "github.com/nikita5637/quiz-registrator-api/pkg/pb/game"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// GameRegistratorServiceClient is an autogenerated mock type for the GameRegistratorServiceClient type
type GameRegistratorServiceClient struct {
	mock.Mock
}

type GameRegistratorServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GameRegistratorServiceClient) EXPECT() *GameRegistratorServiceClient_Expecter {
	return &GameRegistratorServiceClient_Expecter{mock: &_m.Mock}
}

// RegisterGame provides a mock function with given fields: ctx, in, opts
func (_m *GameRegistratorServiceClient) RegisterGame(ctx context.Context, in *game.RegisterGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *game.RegisterGameRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *game.RegisterGameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameRegistratorServiceClient_RegisterGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterGame'
type GameRegistratorServiceClient_RegisterGame_Call struct {
	*mock.Call
}

// RegisterGame is a helper method to define mock.On call
//  - ctx context.Context
//  - in *game.RegisterGameRequest
//  - opts ...grpc.CallOption
func (_e *GameRegistratorServiceClient_Expecter) RegisterGame(ctx interface{}, in interface{}, opts ...interface{}) *GameRegistratorServiceClient_RegisterGame_Call {
	return &GameRegistratorServiceClient_RegisterGame_Call{Call: _e.mock.On("RegisterGame",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GameRegistratorServiceClient_RegisterGame_Call) Run(run func(ctx context.Context, in *game.RegisterGameRequest, opts ...grpc.CallOption)) *GameRegistratorServiceClient_RegisterGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*game.RegisterGameRequest), variadicArgs...)
	})
	return _c
}

func (_c *GameRegistratorServiceClient_RegisterGame_Call) Return(_a0 *emptypb.Empty, _a1 error) *GameRegistratorServiceClient_RegisterGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UnregisterGame provides a mock function with given fields: ctx, in, opts
func (_m *GameRegistratorServiceClient) UnregisterGame(ctx context.Context, in *game.UnregisterGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *game.UnregisterGameRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *game.UnregisterGameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameRegistratorServiceClient_UnregisterGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterGame'
type GameRegistratorServiceClient_UnregisterGame_Call struct {
	*mock.Call
}

// UnregisterGame is a helper method to define mock.On call
//  - ctx context.Context
//  - in *game.UnregisterGameRequest
//  - opts ...grpc.CallOption
func (_e *GameRegistratorServiceClient_Expecter) UnregisterGame(ctx interface{}, in interface{}, opts ...interface{}) *GameRegistratorServiceClient_UnregisterGame_Call {
	return &GameRegistratorServiceClient_UnregisterGame_Call{Call: _e.mock.On("UnregisterGame",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GameRegistratorServiceClient_UnregisterGame_Call) Run(run func(ctx context.Context, in *game.UnregisterGameRequest, opts ...grpc.CallOption)) *GameRegistratorServiceClient_UnregisterGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*game.UnregisterGameRequest), variadicArgs...)
	})
	return _c
}

func (_c *GameRegistratorServiceClient_UnregisterGame_Call) Return(_a0 *emptypb.Empty, _a1 error) *GameRegistratorServiceClient_UnregisterGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdatePayment provides a mock function with given fields: ctx, in, opts
func (_m *GameRegistratorServiceClient) UpdatePayment(ctx context.Context, in *game.UpdatePaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *game.UpdatePaymentRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *game.UpdatePaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameRegistratorServiceClient_UpdatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePayment'
type GameRegistratorServiceClient_UpdatePayment_Call struct {
	*mock.Call
}

// UpdatePayment is a helper method to define mock.On call
//  - ctx context.Context
//  - in *game.UpdatePaymentRequest
//  - opts ...grpc.CallOption
func (_e *GameRegistratorServiceClient_Expecter) UpdatePayment(ctx interface{}, in interface{}, opts ...interface{}) *GameRegistratorServiceClient_UpdatePayment_Call {
	return &GameRegistratorServiceClient_UpdatePayment_Call{Call: _e.mock.On("UpdatePayment",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GameRegistratorServiceClient_UpdatePayment_Call) Run(run func(ctx context.Context, in *game.UpdatePaymentRequest, opts ...grpc.CallOption)) *GameRegistratorServiceClient_UpdatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*game.UpdatePaymentRequest), variadicArgs...)
	})
	return _c
}

func (_c *GameRegistratorServiceClient_UpdatePayment_Call) Return(_a0 *emptypb.Empty, _a1 error) *GameRegistratorServiceClient_UpdatePayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewGameRegistratorServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameRegistratorServiceClient creates a new instance of GameRegistratorServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameRegistratorServiceClient(t mockConstructorTestingTNewGameRegistratorServiceClient) *GameRegistratorServiceClient {
	mock := &GameRegistratorServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
