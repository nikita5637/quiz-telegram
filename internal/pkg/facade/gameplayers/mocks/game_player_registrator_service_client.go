// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gameplayer "github.com/nikita5637/quiz-registrator-api/pkg/pb/game_player"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// GamePlayerRegistratorServiceClient is an autogenerated mock type for the GamePlayerRegistratorServiceClient type
type GamePlayerRegistratorServiceClient struct {
	mock.Mock
}

type GamePlayerRegistratorServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GamePlayerRegistratorServiceClient) EXPECT() *GamePlayerRegistratorServiceClient_Expecter {
	return &GamePlayerRegistratorServiceClient_Expecter{mock: &_m.Mock}
}

// RegisterPlayer provides a mock function with given fields: ctx, in, opts
func (_m *GamePlayerRegistratorServiceClient) RegisterPlayer(ctx context.Context, in *gameplayer.RegisterPlayerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *gameplayer.RegisterPlayerRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gameplayer.RegisterPlayerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamePlayerRegistratorServiceClient_RegisterPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterPlayer'
type GamePlayerRegistratorServiceClient_RegisterPlayer_Call struct {
	*mock.Call
}

// RegisterPlayer is a helper method to define mock.On call
//  - ctx context.Context
//  - in *gameplayer.RegisterPlayerRequest
//  - opts ...grpc.CallOption
func (_e *GamePlayerRegistratorServiceClient_Expecter) RegisterPlayer(ctx interface{}, in interface{}, opts ...interface{}) *GamePlayerRegistratorServiceClient_RegisterPlayer_Call {
	return &GamePlayerRegistratorServiceClient_RegisterPlayer_Call{Call: _e.mock.On("RegisterPlayer",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GamePlayerRegistratorServiceClient_RegisterPlayer_Call) Run(run func(ctx context.Context, in *gameplayer.RegisterPlayerRequest, opts ...grpc.CallOption)) *GamePlayerRegistratorServiceClient_RegisterPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gameplayer.RegisterPlayerRequest), variadicArgs...)
	})
	return _c
}

func (_c *GamePlayerRegistratorServiceClient_RegisterPlayer_Call) Return(_a0 *emptypb.Empty, _a1 error) *GamePlayerRegistratorServiceClient_RegisterPlayer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UnregisterPlayer provides a mock function with given fields: ctx, in, opts
func (_m *GamePlayerRegistratorServiceClient) UnregisterPlayer(ctx context.Context, in *gameplayer.UnregisterPlayerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *gameplayer.UnregisterPlayerRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gameplayer.UnregisterPlayerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamePlayerRegistratorServiceClient_UnregisterPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterPlayer'
type GamePlayerRegistratorServiceClient_UnregisterPlayer_Call struct {
	*mock.Call
}

// UnregisterPlayer is a helper method to define mock.On call
//  - ctx context.Context
//  - in *gameplayer.UnregisterPlayerRequest
//  - opts ...grpc.CallOption
func (_e *GamePlayerRegistratorServiceClient_Expecter) UnregisterPlayer(ctx interface{}, in interface{}, opts ...interface{}) *GamePlayerRegistratorServiceClient_UnregisterPlayer_Call {
	return &GamePlayerRegistratorServiceClient_UnregisterPlayer_Call{Call: _e.mock.On("UnregisterPlayer",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GamePlayerRegistratorServiceClient_UnregisterPlayer_Call) Run(run func(ctx context.Context, in *gameplayer.UnregisterPlayerRequest, opts ...grpc.CallOption)) *GamePlayerRegistratorServiceClient_UnregisterPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gameplayer.UnregisterPlayerRequest), variadicArgs...)
	})
	return _c
}

func (_c *GamePlayerRegistratorServiceClient_UnregisterPlayer_Call) Return(_a0 *emptypb.Empty, _a1 error) *GamePlayerRegistratorServiceClient_UnregisterPlayer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewGamePlayerRegistratorServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewGamePlayerRegistratorServiceClient creates a new instance of GamePlayerRegistratorServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGamePlayerRegistratorServiceClient(t mockConstructorTestingTNewGamePlayerRegistratorServiceClient) *GamePlayerRegistratorServiceClient {
	mock := &GamePlayerRegistratorServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
