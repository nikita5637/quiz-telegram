// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	photomanager "github.com/nikita5637/quiz-registrator-api/pkg/pb/photo_manager"
)

// PhotographerServiceClient is an autogenerated mock type for the PhotographerServiceClient type
type PhotographerServiceClient struct {
	mock.Mock
}

type PhotographerServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *PhotographerServiceClient) EXPECT() *PhotographerServiceClient_Expecter {
	return &PhotographerServiceClient_Expecter{mock: &_m.Mock}
}

// AddGamePhotos provides a mock function with given fields: ctx, in, opts
func (_m *PhotographerServiceClient) AddGamePhotos(ctx context.Context, in *photomanager.AddGamePhotosRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *photomanager.AddGamePhotosRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *photomanager.AddGamePhotosRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PhotographerServiceClient_AddGamePhotos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGamePhotos'
type PhotographerServiceClient_AddGamePhotos_Call struct {
	*mock.Call
}

// AddGamePhotos is a helper method to define mock.On call
//  - ctx context.Context
//  - in *photomanager.AddGamePhotosRequest
//  - opts ...grpc.CallOption
func (_e *PhotographerServiceClient_Expecter) AddGamePhotos(ctx interface{}, in interface{}, opts ...interface{}) *PhotographerServiceClient_AddGamePhotos_Call {
	return &PhotographerServiceClient_AddGamePhotos_Call{Call: _e.mock.On("AddGamePhotos",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *PhotographerServiceClient_AddGamePhotos_Call) Run(run func(ctx context.Context, in *photomanager.AddGamePhotosRequest, opts ...grpc.CallOption)) *PhotographerServiceClient_AddGamePhotos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*photomanager.AddGamePhotosRequest), variadicArgs...)
	})
	return _c
}

func (_c *PhotographerServiceClient_AddGamePhotos_Call) Return(_a0 *emptypb.Empty, _a1 error) *PhotographerServiceClient_AddGamePhotos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetGamesWithPhotos provides a mock function with given fields: ctx, in, opts
func (_m *PhotographerServiceClient) GetGamesWithPhotos(ctx context.Context, in *photomanager.GetGamesWithPhotosRequest, opts ...grpc.CallOption) (*photomanager.GetGamesWithPhotosResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *photomanager.GetGamesWithPhotosResponse
	if rf, ok := ret.Get(0).(func(context.Context, *photomanager.GetGamesWithPhotosRequest, ...grpc.CallOption) *photomanager.GetGamesWithPhotosResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*photomanager.GetGamesWithPhotosResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *photomanager.GetGamesWithPhotosRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PhotographerServiceClient_GetGamesWithPhotos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGamesWithPhotos'
type PhotographerServiceClient_GetGamesWithPhotos_Call struct {
	*mock.Call
}

// GetGamesWithPhotos is a helper method to define mock.On call
//  - ctx context.Context
//  - in *photomanager.GetGamesWithPhotosRequest
//  - opts ...grpc.CallOption
func (_e *PhotographerServiceClient_Expecter) GetGamesWithPhotos(ctx interface{}, in interface{}, opts ...interface{}) *PhotographerServiceClient_GetGamesWithPhotos_Call {
	return &PhotographerServiceClient_GetGamesWithPhotos_Call{Call: _e.mock.On("GetGamesWithPhotos",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *PhotographerServiceClient_GetGamesWithPhotos_Call) Run(run func(ctx context.Context, in *photomanager.GetGamesWithPhotosRequest, opts ...grpc.CallOption)) *PhotographerServiceClient_GetGamesWithPhotos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*photomanager.GetGamesWithPhotosRequest), variadicArgs...)
	})
	return _c
}

func (_c *PhotographerServiceClient_GetGamesWithPhotos_Call) Return(_a0 *photomanager.GetGamesWithPhotosResponse, _a1 error) *PhotographerServiceClient_GetGamesWithPhotos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetPhotosByGameID provides a mock function with given fields: ctx, in, opts
func (_m *PhotographerServiceClient) GetPhotosByGameID(ctx context.Context, in *photomanager.GetPhotosByGameIDRequest, opts ...grpc.CallOption) (*photomanager.GetPhotosByGameIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *photomanager.GetPhotosByGameIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, *photomanager.GetPhotosByGameIDRequest, ...grpc.CallOption) *photomanager.GetPhotosByGameIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*photomanager.GetPhotosByGameIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *photomanager.GetPhotosByGameIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PhotographerServiceClient_GetPhotosByGameID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPhotosByGameID'
type PhotographerServiceClient_GetPhotosByGameID_Call struct {
	*mock.Call
}

// GetPhotosByGameID is a helper method to define mock.On call
//  - ctx context.Context
//  - in *photomanager.GetPhotosByGameIDRequest
//  - opts ...grpc.CallOption
func (_e *PhotographerServiceClient_Expecter) GetPhotosByGameID(ctx interface{}, in interface{}, opts ...interface{}) *PhotographerServiceClient_GetPhotosByGameID_Call {
	return &PhotographerServiceClient_GetPhotosByGameID_Call{Call: _e.mock.On("GetPhotosByGameID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *PhotographerServiceClient_GetPhotosByGameID_Call) Run(run func(ctx context.Context, in *photomanager.GetPhotosByGameIDRequest, opts ...grpc.CallOption)) *PhotographerServiceClient_GetPhotosByGameID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*photomanager.GetPhotosByGameIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *PhotographerServiceClient_GetPhotosByGameID_Call) Return(_a0 *photomanager.GetPhotosByGameIDResponse, _a1 error) *PhotographerServiceClient_GetPhotosByGameID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewPhotographerServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewPhotographerServiceClient creates a new instance of PhotographerServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPhotographerServiceClient(t mockConstructorTestingTNewPhotographerServiceClient) *PhotographerServiceClient {
	mock := &PhotographerServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
