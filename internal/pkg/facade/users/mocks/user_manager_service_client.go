// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	usermanager "github.com/nikita5637/quiz-registrator-api/pkg/pb/user_manager"
)

// UserManagerServiceClient is an autogenerated mock type for the UserManagerServiceClient type
type UserManagerServiceClient struct {
	mock.Mock
}

type UserManagerServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *UserManagerServiceClient) EXPECT() *UserManagerServiceClient_Expecter {
	return &UserManagerServiceClient_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, in, opts
func (_m *UserManagerServiceClient) CreateUser(ctx context.Context, in *usermanager.CreateUserRequest, opts ...grpc.CallOption) (*usermanager.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *usermanager.User
	if rf, ok := ret.Get(0).(func(context.Context, *usermanager.CreateUserRequest, ...grpc.CallOption) *usermanager.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usermanager.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *usermanager.CreateUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserManagerServiceClient_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserManagerServiceClient_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - in *usermanager.CreateUserRequest
//  - opts ...grpc.CallOption
func (_e *UserManagerServiceClient_Expecter) CreateUser(ctx interface{}, in interface{}, opts ...interface{}) *UserManagerServiceClient_CreateUser_Call {
	return &UserManagerServiceClient_CreateUser_Call{Call: _e.mock.On("CreateUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *UserManagerServiceClient_CreateUser_Call) Run(run func(ctx context.Context, in *usermanager.CreateUserRequest, opts ...grpc.CallOption)) *UserManagerServiceClient_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*usermanager.CreateUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *UserManagerServiceClient_CreateUser_Call) Return(_a0 *usermanager.User, _a1 error) *UserManagerServiceClient_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUser provides a mock function with given fields: ctx, in, opts
func (_m *UserManagerServiceClient) GetUser(ctx context.Context, in *usermanager.GetUserRequest, opts ...grpc.CallOption) (*usermanager.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *usermanager.User
	if rf, ok := ret.Get(0).(func(context.Context, *usermanager.GetUserRequest, ...grpc.CallOption) *usermanager.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usermanager.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *usermanager.GetUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserManagerServiceClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserManagerServiceClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//  - ctx context.Context
//  - in *usermanager.GetUserRequest
//  - opts ...grpc.CallOption
func (_e *UserManagerServiceClient_Expecter) GetUser(ctx interface{}, in interface{}, opts ...interface{}) *UserManagerServiceClient_GetUser_Call {
	return &UserManagerServiceClient_GetUser_Call{Call: _e.mock.On("GetUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *UserManagerServiceClient_GetUser_Call) Run(run func(ctx context.Context, in *usermanager.GetUserRequest, opts ...grpc.CallOption)) *UserManagerServiceClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*usermanager.GetUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *UserManagerServiceClient_GetUser_Call) Return(_a0 *usermanager.User, _a1 error) *UserManagerServiceClient_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserByTelegramID provides a mock function with given fields: ctx, in, opts
func (_m *UserManagerServiceClient) GetUserByTelegramID(ctx context.Context, in *usermanager.GetUserByTelegramIDRequest, opts ...grpc.CallOption) (*usermanager.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *usermanager.User
	if rf, ok := ret.Get(0).(func(context.Context, *usermanager.GetUserByTelegramIDRequest, ...grpc.CallOption) *usermanager.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usermanager.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *usermanager.GetUserByTelegramIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserManagerServiceClient_GetUserByTelegramID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByTelegramID'
type UserManagerServiceClient_GetUserByTelegramID_Call struct {
	*mock.Call
}

// GetUserByTelegramID is a helper method to define mock.On call
//  - ctx context.Context
//  - in *usermanager.GetUserByTelegramIDRequest
//  - opts ...grpc.CallOption
func (_e *UserManagerServiceClient_Expecter) GetUserByTelegramID(ctx interface{}, in interface{}, opts ...interface{}) *UserManagerServiceClient_GetUserByTelegramID_Call {
	return &UserManagerServiceClient_GetUserByTelegramID_Call{Call: _e.mock.On("GetUserByTelegramID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *UserManagerServiceClient_GetUserByTelegramID_Call) Run(run func(ctx context.Context, in *usermanager.GetUserByTelegramIDRequest, opts ...grpc.CallOption)) *UserManagerServiceClient_GetUserByTelegramID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*usermanager.GetUserByTelegramIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *UserManagerServiceClient_GetUserByTelegramID_Call) Return(_a0 *usermanager.User, _a1 error) *UserManagerServiceClient_GetUserByTelegramID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchUser provides a mock function with given fields: ctx, in, opts
func (_m *UserManagerServiceClient) PatchUser(ctx context.Context, in *usermanager.PatchUserRequest, opts ...grpc.CallOption) (*usermanager.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *usermanager.User
	if rf, ok := ret.Get(0).(func(context.Context, *usermanager.PatchUserRequest, ...grpc.CallOption) *usermanager.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usermanager.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *usermanager.PatchUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserManagerServiceClient_PatchUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchUser'
type UserManagerServiceClient_PatchUser_Call struct {
	*mock.Call
}

// PatchUser is a helper method to define mock.On call
//  - ctx context.Context
//  - in *usermanager.PatchUserRequest
//  - opts ...grpc.CallOption
func (_e *UserManagerServiceClient_Expecter) PatchUser(ctx interface{}, in interface{}, opts ...interface{}) *UserManagerServiceClient_PatchUser_Call {
	return &UserManagerServiceClient_PatchUser_Call{Call: _e.mock.On("PatchUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *UserManagerServiceClient_PatchUser_Call) Run(run func(ctx context.Context, in *usermanager.PatchUserRequest, opts ...grpc.CallOption)) *UserManagerServiceClient_PatchUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*usermanager.PatchUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *UserManagerServiceClient_PatchUser_Call) Return(_a0 *usermanager.User, _a1 error) *UserManagerServiceClient_PatchUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewUserManagerServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserManagerServiceClient creates a new instance of UserManagerServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserManagerServiceClient(t mockConstructorTestingTNewUserManagerServiceClient) *UserManagerServiceClient {
	mock := &UserManagerServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
