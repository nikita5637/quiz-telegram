package mysql

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/nikita5637/quiz-telegram/internal/pkg/model"

	"github.com/go-xorm/builder"
)

// RequestsStorage ...
type RequestsStorage struct {
	db *sql.DB
}

// NewRequestsStorage ...
func NewRequestsStorage(db *sql.DB) *RequestsStorage {
	return &RequestsStorage{
		db: db,
	}
}

// Delete ...
func (s *RequestsStorage) Delete(ctx context.Context, id int32) error {
	const query = `DELETE FROM request WHERE id = ?`

	_, err := s.db.Exec(query,
		id,
	)
	if err != nil {
		return err
	}

	return nil
}

// Find ...
func (s *RequestsStorage) Find(ctx context.Context, q builder.Cond) ([]model.Request, error) {
	query := `SELECT
		id,
		group_uuid,
		uuid,
		body
	FROM request`

	var args []interface{}
	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, fmt.Errorf("cannot create select query: %w", err)
		}
		query += ` WHERE ` + where
	}

	rows, err := s.db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var requests []model.Request

	for rows.Next() {
		request := model.Request{}
		if err := rows.Scan(
			&request.ID,
			&request.GroupUUID,
			&request.UUID,
			&request.Body,
		); err != nil {
			return nil, err
		}

		requests = append(requests, request)
	}

	return requests, nil
}

// GetRequestByUUID ...
func (s *RequestsStorage) GetRequestByUUID(ctx context.Context, uuid string) (model.Request, error) {
	const query = `SELECT
		id,
		group_uuid,
		uuid,
		body
	FROM request WHERE uuid = ?`

	rows, err := s.db.QueryContext(ctx, query, uuid)
	if err != nil {
		return model.Request{}, err
	}
	defer rows.Close()

	request := model.Request{}
	for rows.Next() {
		if err := rows.Scan(
			&request.ID,
			&request.GroupUUID,
			&request.UUID,
			&request.Body,
		); err != nil {
			return model.Request{}, err
		}
	}

	if request.ID == 0 {
		return model.Request{}, model.ErrRequestNotFound
	}

	return request, nil
}

// Insert returns UUID generated by database
func (s *RequestsStorage) Insert(ctx context.Context, request model.Request) (uint64, string, error) {
	const query = `INSERT INTO request(
		group_uuid,
		body
	) VALUES (?, ?)`

	res, err := s.db.ExecContext(ctx, query,
		request.GroupUUID,
		request.Body,
	)
	if err != nil {
		return 0, "", err
	}

	lastID, err := res.LastInsertId()
	if err != nil {
		return 0, "", err
	}

	// get uuid
	row := s.db.QueryRowContext(ctx, `SELECT uuid FROM request WHERE id = ?;`, lastID)
	if err != nil {
		return 0, "", err
	}

	uuid := ""
	err = row.Scan(&uuid)
	if err != nil {
		return 0, "", err
	}

	return uint64(lastID), uuid, nil
}
