// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	builder "github.com/go-xorm/builder"

	mock "github.com/stretchr/testify/mock"

	model "github.com/nikita5637/quiz-telegram/internal/pkg/model"
)

// RequestStorage is an autogenerated mock type for the RequestStorage type
type RequestStorage struct {
	mock.Mock
}

type RequestStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestStorage) EXPECT() *RequestStorage_Expecter {
	return &RequestStorage_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *RequestStorage) Delete(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RequestStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - id int32
func (_e *RequestStorage_Expecter) Delete(ctx interface{}, id interface{}) *RequestStorage_Delete_Call {
	return &RequestStorage_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *RequestStorage_Delete_Call) Run(run func(ctx context.Context, id int32)) *RequestStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *RequestStorage_Delete_Call) Return(_a0 error) *RequestStorage_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// Find provides a mock function with given fields: ctx, q
func (_m *RequestStorage) Find(ctx context.Context, q builder.Cond) ([]model.Request, error) {
	ret := _m.Called(ctx, q)

	var r0 []model.Request
	if rf, ok := ret.Get(0).(func(context.Context, builder.Cond) []model.Request); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, builder.Cond) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestStorage_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type RequestStorage_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//  - ctx context.Context
//  - q builder.Cond
func (_e *RequestStorage_Expecter) Find(ctx interface{}, q interface{}) *RequestStorage_Find_Call {
	return &RequestStorage_Find_Call{Call: _e.mock.On("Find", ctx, q)}
}

func (_c *RequestStorage_Find_Call) Run(run func(ctx context.Context, q builder.Cond)) *RequestStorage_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(builder.Cond))
	})
	return _c
}

func (_c *RequestStorage_Find_Call) Return(_a0 []model.Request, _a1 error) *RequestStorage_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRequestByUUID provides a mock function with given fields: ctx, uuid
func (_m *RequestStorage) GetRequestByUUID(ctx context.Context, uuid string) (model.Request, error) {
	ret := _m.Called(ctx, uuid)

	var r0 model.Request
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Request); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(model.Request)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestStorage_GetRequestByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRequestByUUID'
type RequestStorage_GetRequestByUUID_Call struct {
	*mock.Call
}

// GetRequestByUUID is a helper method to define mock.On call
//  - ctx context.Context
//  - uuid string
func (_e *RequestStorage_Expecter) GetRequestByUUID(ctx interface{}, uuid interface{}) *RequestStorage_GetRequestByUUID_Call {
	return &RequestStorage_GetRequestByUUID_Call{Call: _e.mock.On("GetRequestByUUID", ctx, uuid)}
}

func (_c *RequestStorage_GetRequestByUUID_Call) Run(run func(ctx context.Context, uuid string)) *RequestStorage_GetRequestByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RequestStorage_GetRequestByUUID_Call) Return(_a0 model.Request, _a1 error) *RequestStorage_GetRequestByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Insert provides a mock function with given fields: ctx, request
func (_m *RequestStorage) Insert(ctx context.Context, request model.Request) (uint64, string, error) {
	ret := _m.Called(ctx, request)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, model.Request) uint64); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, model.Request) string); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, model.Request) error); ok {
		r2 = rf(ctx, request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RequestStorage_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type RequestStorage_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//  - ctx context.Context
//  - request model.Request
func (_e *RequestStorage_Expecter) Insert(ctx interface{}, request interface{}) *RequestStorage_Insert_Call {
	return &RequestStorage_Insert_Call{Call: _e.mock.On("Insert", ctx, request)}
}

func (_c *RequestStorage_Insert_Call) Run(run func(ctx context.Context, request model.Request)) *RequestStorage_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Request))
	})
	return _c
}

func (_c *RequestStorage_Insert_Call) Return(_a0 uint64, _a1 string, _a2 error) *RequestStorage_Insert_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

type mockConstructorTestingTNewRequestStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequestStorage creates a new instance of RequestStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequestStorage(t mockConstructorTestingTNewRequestStorage) *RequestStorage {
	mock := &RequestStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
